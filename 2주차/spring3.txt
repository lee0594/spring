저번에 작성한 코드에 좋은 객체 지향 원리 적용하기
기획자가 새로운 할인 정책 추가해 달라 함, but DIP/OCP를 못 지키는 문제가 발생, 이걸 어떻게 해결하는지 코드로 자연스럽게 알아볼 것

3-1. 새로운 할인 정책 개발
p.1
인터페이스 사용, 역할과 구현을 나눠서 구현해서 객체지향 설계 원칙을 준수함

3-2. 새로운 할인 정책 적용과 문제점
p.4
우리는 할인정책을 변경하려면 할인정책의 클리이언트인 orderserviceimpl 코드를 고쳐야 함
:우리는 discount policy에 대해 역할과 구현 분리하고 다형성 활용, 인터페이스와 구현 객체를 분리했지만 DIP, OCP를 위반했음
:orderserviceimpl파일의 기존 code를 보면 discountpolicy와 fixdiscountpolicy에 모두 의존했음: 즉 추상에만 의존해야 했는데 추상과 구체적인 것에 모두 의존했음
'''
private final DiscountPolicy discountPolicy = new FixDiscountPolicy();
'''
DIP를 위반했기 때문에 OCP도 위반하게 됨(의존성)
p.7
DIP를 지키니까 문제가 생김
=>OrderServiceTest를 돌려보면 null pointer exception이 나는 것을 확인할 수 있음
:null에 점찍으면 null pointer exception이 터지는데, test code를 보면 orderserviceimpl 파일에 구현되어 있는 createorder을 호출함, 근데 orderserviceimpl 파일을 보면 discountpolicy에 아무것도 할당이 안되어있으므로(구현 객체가 없음) null이고 null.discount를 했으므로 터지는 것임

3-3. 관심사의 분리
p.7
orderserviceimpl는 orderservice와 관련된 logic만 해야 하는데 discount policy를 자기가 직접 선택했음(직접 객체 생성 후 구체적 선택)
p.8,9
우리가 실제 실행되는 객체들은 본인의 역할만 하게 해주고 어떤 구현체들이 인터페이스에 할당될지는 공연 기획자가 해야함: 여기서는 그게 appconfig(설정 클래스)
:예전에는 객체를 생성하고 이 인터페이스에 어떤 게 할당되어야 하는지 memberserviceimpl에서 직접 했었음: memberserviceimpl을 보면 memorymemberrepository라고 memberserviceimpl이 직접 설정했었던 것을 볼 수 있음
:코드를 수정하면 이제 memberserviceimpl 파일에는 memberrepository라는 interface만 존재: 이제 추상화에만 의존하므로 DIP 지킴
:이거를 생성자를 통해 객체가 생성된 게 들어간다고 해서 '생성자 주입'이라고 함: 이것은 의존관계 주입 방법임
마찬가지로 orderserviceimpl에서도 사용하는 두 field 모두 생성자 주입을 함=>얘도 인제 인터페이스에만 의존하므로 DIP 지킴(fix가 들어올지, discount가 들어올지 등등을 아예 모름: 그냥 다형성에 의해 뭔가가 들어오는 것)
----
결과적으로 단일 책임원칙을 지키게 됨

3-5. 새로운 구조와 할인 정책 적용
이제 할인 정책이 바뀌어도 AppConfig만 변경하면 됨
appconfig: xml 같은걸로도 할 수 있음
DIP, OCP 다 지킴(OCP: 확장에는 열려있고 변경에는 닫혀있음)

3-7. 좋은 객체 지향 설계의 5가지 원칙의 적용
클라이언트 객체(orderservice 구현 객체 등) 너무 많은 책임을 가지고 있었음=>appconfig 사용함으로써 SRP 단일 책임의 원칙이 지켜짐


**참고: 어떤 것에 의존하면 그 의존하는 것은 의존당하는 것에 대해 클라이언트라고 하는듯

3-8. IoC, DI, 그리고 컨테이너
제어의 역전(IOC): 내가 호출하는 것이 아니라 프레임워크가 내 코드를 대신 호출해 주는 것
프레임워크와 라이브러리를 구분할 때 제어의 역전이 중요함
ex)JUnit: test code에서 join 로직만 개발하고 이거에 대한 실행과 제어권은 JUnit이라는 test framework가 대신 실행해줌(자신만의 라이프사이클을 가지고(beforeeach를 먼저 실행하고 test를 실행한다 등), 나는 제어권이 없음
=>프레임워크: 제어의 역전
ex) 자바 객체를 snl이나 json으로 바꿀 때 내가 그 라이브러리를 불러다 직접 호출함
=>라이브러리
**의존관계 주입(DI)
***정적인 클래스 의존관계: 내가 사용하는 클래스나 객체들만 보고(import 코드만 보고) 바로 판단할 수 있는 것, 애플리케이션을 실행하지 않아도 분석 가능=>tool같은 걸로 분석 가능(정적으로 실행하지 않고도 판단 가능)
:hello.core에서 diagrams의 show diagram=>java class diagrams(ultimate 버전에서만 지원함)=>show dependencies: 의존관계가 보임
상속관계/인터페이스 구현 모두 화살표 방향으로 의존하고 있다는 뜻임(discountpolicy: member는 사용하고 있지만 그 외 다른 의존관계 전혀 사용하지 않고 있음)
***동적인 객체 인스턴스 의존 관계
실제 실행시켜야지 orderserviceimpl에 fix가 들어올지 rate가 들어올지, memory가 들어올지 알 수 있음
참조로 객체 인스턴스들이 연결됨
의존관계 주입을 사용하면 application code에 손대지 않고 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있음
**IOC 컨테이너와 DI 컨테이너
ICO를 해주는 컨테이너(제어권이 넘어가는 것, 좀 범용적)와 DI를 해주는 컨테이너라고 생각하면 됨
spring 말고 다른 DI 컨테이너들도 많음
application 전체에 대한 구성을 조립을 한다고 해서 어샘블러라고 하기도 함, 오브젝트를 만들어야 한다고 오브젝트 팩토리라고 부르기도 함

3-9. 스프링으로 전환하기
각 method에 @Bean이라 적어주면 orderService, discountPolicy, memberService, memberRepositoy들이 다 spring container에 등록됨(이게 이름이고 각각의 value는 return 값이 됨: 반환된 객체를 스프링 컨체이너에 등록하는 것): 이 return된 객체가 spring container에서 관리가 되는데 이걸 spring bean이라 함
spring은 모든게 applicationContext라고 시작함: 이게 spring container
P.28
ApplicationContext: 전체 application이 문맥: 스프링 컨테이너라 함
스프링 빈은 @Bean이 붙은 메서드의 명을 스프링 빈의 이름으로 사용하지만 @Bean(name="...")으로 바꿀 수 있긴 함
**스프링 컨테이너 사용했을 때 장점
스프링 컨테이너가 관리해 줌으로써 해줄 수 있는 기능이 매우 많음
:이제부터 설명할 것
