4-1. 스프링 컨테이너와 스프링 빈
p.1
AppliationContext: 인터페이스=>다형성이 적용됨
:applicationContext 인터페이스를 구현한 것 중 하나가 annotationconfigapplication임(appconfig: 자바 config로 만들어져 있음: 이름 그대로 annotation기반의 자바 config 설정을 기반으로 applicationcontext(spring을 만들어라)라는 뜻임)
요즘은 XML 기반으로는 스프링컨테이너를 잘 만들지 않음(스프링 부트 자체가 애노테이션 기반으로 편리하게 작동하기 때문)
'''
new AnnotationConfigApplicationContext(AppConfig.class)
'''
생성자의 parameter로 AppConfig.class를 넣어줌, 위 코드는 applicationContext 인터페이스의 구현체임=>스프링 컨테이너가 만들어짐
여기서 appconfig.class는 설정정보(구성정보)
즉
'''
ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
'''
이게 모든 것(@bean이라 된 객체들을) 관리해줌, 이렇게 적으면 AppConfig에 있는 환경 설정 정보를 가지고 spring이 @Bean 붙은 것들을 spring container에 객체 생성한 것들을 넣어서 관리함: 즉 이제 찾아올 때 appConfig에서 직접 찾아오지 않고 spring container을 통해서 가져옴

컨테이너: 그 안에 사용하는 객체들을 담고 있는 것
p.2,3
스프링 컨테이너가 본인을 생성하면서 스프링 빈 저장소에 spring bean을 등록함: key: bean(메소드) 이름, 값: bean의 객체(new로 반환하는 인스턴스 객체)
스프링 빈 의존관계 설정: 동적인 객체 인스턴스 의존관계를 실제로 spring이 다 연결해줌(객체의 참조값들(reference)가 다 연결됨)

4-2. 컨테이너에 등록된 모든 빈 조회
spring이 내부적으로 spring 자체를 확장하기 위해 쓰는 기반 bean들이 test에서 먼저 출력됨, appconfig도 spring bean으로 등록이 됨=>application bean 출력해서 필요한 bean들만 출력(appconfig 포함해서 다섯개만 출력이 됨)
getRole하면 role이 세가지가 있는데 .ROLE_APPLICATION는 스프링 내부 뭔가를 하기 위해 등록한 빈들이 아니라 내가 applicaiton을 개발하기 위해서 등록한 빈(외부 library 포함)만 출력하게 함
ac.getBean(): spring container에서 찾아오는 것

4-3. 스프링 빈 조회-기본
test code에서 assertions는 junit이 아니라 두번째 거 선택
이름,type이 아니라 type만으로도 getBean을 쓸 수 있는데 그러면 같은 타입이 여러개일 때 곤란해짐
ApplicationContextBasicFindTest.java
: MemberService라는 인터페이스로 조회함=>인터페이스의 구현체가 대상이 됨
'''
MemberService memberService = ac.getBean("memberService", MemberService.class);
assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
'''
''' 참고 '''
AppConfig.memberService()로부터 반환되는 실제 객체는 MemberServiceImpl 타입입니다.

memberService()로부터 반환된 실제 객체를 MemberService타입의 변수인 memberService로 받았습니다.

따라서, memberService.isInstanceOf(MemberServiceImpl.class)를 실행하면 memberService 변수 내에 담긴 실제 객체(MemberServiceImpl타입의 객체)가 MemberServiceImpl 타입의 인스턴스인지 비교하게 됩니다.
''''''

4-4. 스프링 빈 조회 - 동일한 타입이 둘 이상
동일한 타입이 둘 이상인데 type이로만 getbean을 하면 nouniquebeandefinitionexception 예외가 터짐

나중에 자동 의존관계 주입하거나 할 때 특정 타입을 모두 조회하는 방법이 사용됨(getBeansOfType 사용)

4-5. 스프링 빈 조회 - 상속 관계
!!!!중요!!!!
대원칙: 부모 타입으로 조회하면 자식 타입도 함께 조회된다(뒤에서도 쓰일 것)
: class조차도 눈에는 안보이지만 extends Object를 하고 있음: Object는 모든 자바 객체의 최고 부모
test code에서 DiscountPolicy로 조회하면 자식 타입이 두개인 것이 조회됨

'''
@Configuration
    static class TestConfig {
        @Bean
        public DiscountPolicy rateDiscountPolicy() {
            return new RateDiscountPolicy();
        }
'''
위 코드에서 사실 DiscountPolicy rateDiscountPolicy에서 앞 부분을 RateDiscountPolicy로 해도 상관은 없지만 역할과 구현을 쪼개기 위함임

Object type으로 bean 조회하면 spring 내부적으로 쓰는 bean끼리 다 튀어나옴
:자바 객체는 모든 게 Object type이기 때문

사실 뒤로 가면 applicationcontext에서 직접 defi할 일이 별로 없음: 뒤에 가면 spring container가 자동으로 의존관계주입을 해주는 것을 쓰거나 하고, 실제 개발할 때는 application context에서 bean 조회할 일이 거의 없기 때문