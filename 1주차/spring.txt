1-2.자바 진영의 추운 겨울과 스프링의 탄생
EJB = 지금의 spring+jpa
container 기술, 설정에 따른 transaction 관리, 분산 기술(서비스 등을 별도의 서버에 두고 분산해서 사용): 이론적 측면에서 매우 좋았음
nttp/jpa: orm 기술: java 객체를 db에 편하게 저장하고 꺼내는 기술(query 안쓰고)
but EJB: 매우 비쌌음, 매우 어렵고 복잡하고 느렸음
:EJB에 의존적으로 개발하고 제공하는 인터페이스도 다 구현해야했음
p.11
jpa같은 표준기술은 인터페이스만 있고 구현체는 따로 만들어야 함
요즘은 대부분 jpa라는 표준 하이버네이트를 사용(실용성+표준이 가져오는 안전성)
p.16
스프링은 좋지만 설정이 너무 어려움, 또한 스프링으로 주로 웹 어플리케이션을 개발함: 그러면 톰켓이나 웹서버에 집어넣고 배포해야 하는데 세팅하는 게 너무 복잡함: 다른 프레임워크들이나 오픈소스에서 하던 것처럼 서버를 내장해서 빌드 편하게 띄우고 설정 편하게 하도록 스프링 부트가 나옴
리엑티브 프로그래밍: 자바에서도 비동기 논블록킹 개발할 수 있게 됨(node js처럼)

1-3.스프링이란?
p.18
스프링: 여러가지 기술들의 모음
스프링 프레임워크: 스프링의 핵심
스프링 부트: 여러 스프링 기술들을 편리하게 이용할 수 있도록 도와주는 것
스프링 데이터: mongo db, nosql, radis, ...등 db들은 기본적인 crud(동록 수정 삭제 조회)는 다 비슷: 이것들을 편하기 사용하도록 도와주는 기술 : 스프링 데이터 jpa를 가장 많이 사용함
스프링 rest docs: api 문서를 편리하게 해주는 것
스프링 배치: 애플리케이션에서 실무에서는 많은 data 관리(업데이트) 실시간으로 하기 힘듦: 일정 단위로 나눠서 하는것을 배치 처리라 하는데 배치 처리에 특화된 기술
이것 외에도 많은 기술들이 있음: spring.io 사이트에 들어가서 project overview 보면 여러가지가 있는 것을 볼 수 있음
p.19
핵심 기술: 스프링의 모든 라이브러리들이 활용하는 핵심 기술
데이터 접근 기술: db에 접근하는 기술
이 강의에서는 스프링의 핵심 기술에 초점을 맞추고 있음, 나머지는 다 파생된 것
p.20
스프링 부트
:빌드하고 서버 띄우는 것까지 자체적으로 다 해줌
스프링 프레임워크 라이브러리 다 입력하지 않아도 starter쓰면 편하게 하나만 땡기면 starter가 나머지 라이브러리까지 알아서 가져오도록 잘 구성해놓음
외부 라이브러리 자동 구성: 과거에는 spring framework와 맞는 외부 라이브러리 버전을 맞추는 것이 어려웠는데 스프링 부트를 이걸 알아서 챙겨줌
운영 과정에서 (메트릭)모니터링이 중요한데 이걸 기본적으로 제공해줌
spring boot: 웬만한 설정은 다 디폴트 설정되어 있고 메뉴얼에 나와있음, 내가 필요하면 메뉴얼 보고 설정 조금만 변경하면 됨
스프링 부트: 스프링 프레임워크와 별도로 사용할 수 있는 것이 아님: 편리하게 사용할 수 있는 기능들을 제공하는 것 
spring boot를 쓰면 자동으로 스프링 프레임워크를 땡기긴 함
p.25
과거: ejb에 의존적으로(종속해서) 개발=>객체 지향이 가진 장점을 다 잃어버림
spring이 가진 DI(IO/IOC) 컨테이너는 객체 지향을 잘 할 수 있게 도와주는 도구
**좋은 객체 지향 프로그래밍이 뭔지를 이해해야 spring framework를 제대로 이해할 수 있음

1-3. 좋은 객체 지향 프로그래밍이란?
유연하고 변경 용이: 다형성으로 인한 것
실세계 비유에서
역할: 인터페이스
구현: 실제 그 인터페이스를 구현한 객체
이 두개로 나눔
#자동차 예시
자동차가 바뀌어도 운전자에게 영향x: 여전히 운전할 수 있음(자동차 역할에 대한 구현만 바뀌었을 뿐) => 자동차의 역할의 인터페이스에 따라서 자동차를 구현했기 때문: 운전자는 자동차 인터페이스만 알면 됨(자동차 역할에 대해서만 의존하고 있음)
=>운전자(client)는 자동차 내부 구조를 몰라도 되고 구현이 내부적으로 바뀌어도(ex 경유차=>전기차) 자동차(대상)의 역할이 그대로이면 운전자에게 영향을 주지 않음=>자동차 세상 무한히 확장 가능
: client에게 영향을 주지 않고 새로운 기능 제공 가능
#로미오와 줄리엣 예시
배우는 대체 가능: 역할과 구현을 나누면 변경 가능한 대체 가능성이 생김: 이게 바로 유연하고 변경이 용이하다는 뜻임
:내부 구조를 몰라도 됨(ex:줄리엣 역할을 누가 하는지 몰라도(구현이 바뀌어도) 로미오는 상관 없음: 대본에 나와있는 줄리엣만 역할만 알면 됨)
클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않음(ex 현대차=>테슬라)
p.36
물론 꼭 인터페이스가 아니고 일반 상속 관계도 다형성이 가능하긴 함, but 인터페이스는 다중 상속 가능하지만 일반 상속 관계는 단일 상속밖에 안되는 등 여러 문제가 있기 때문에 웬만하면 인터페이스로 하는 게 나음
핵심: 구현보다 인터페이스가 먼저이다
p.38
서버는 동시에 클라이언트가 될 수 있음: 두번째 그림에서 서버는 클라이언트가 되서 다른 서버들에게 요청함
응답: data를 넣어서 return 값이 없어도 됨: 클라이언트가 요청한 행위를 하는게 응답임
p.39
자바 언어의 다형성: 오버라이딩으로 동작함
오버라이딩: 결과적으로 오버라이딩 된 메소드가 실행이 됨
p.40
자바에서 client인 memberservice는 Memberrepository를 의존함(의존한다: 내가 쟤를 알고 있다는 뜻)
Memberrepository interface를 구현한 memory ~와 jdbc(db에 저장하고 싶을 때)를 모두 할당할 수 있음, 둘 중 뭘 넣느냐에 따라 save()를 호출했을때 각각에 있는 save()가 호출됨
p.46
인터페이스가 깨지면 다 끝남: save()말고 다른 method가 필요하면 다 따로 구현해야 함: api 자체를 잘 설계하는 게 중요함
p.48
스프링 컨테이너 기능: 다형성을 편리하게 사용할 수 있도록 지원하는 개념임
**spring과 객체지향: 다형성 말고 SOLID도 알아야 함(면접에서 잘 나옴)

1-4. 좋은 객체 지향 설계의 5가지 원칙(SOLID)
p.51
ex: UI 변경할 때 코드 다 변경해야 하면 단일 책임 원칙을 잘 지키지 못한 것임
변경이 있을 때 하나의 class나 하나의 지점만 고치면 SRP 잘 따르는 것
P.52,53,54
OCP: 가장 중요한 원칙
두번째 사진: JdbcMemberRepository() class(구현체)를 만들고 이를 new 해서 memberservice에 할당한 것
여기서 클라이언트 코드: MemberService
***자바에서는 OCP원칙을 지킬수가 없음: 객체를 생성하고 연관관계를 맺어주는 별도의 조립을 해주는 설정자가 별도로 필요함: 이게 spring container가 해주는 역할
p.55
LSP: 기능적으로 보장을 해주어야 함
p.57
DIP: 이것도 OCP만큼 중요한 원칙, DIP는 OCP와 연관이 있음
ex: 운전자는 자동차 역할에 대해 알아야지 테슬리에 대해 디테일하게 알면 안됨, 원빈이 대본에 의존하는 게 아닌 김태희하고만 공연할 수 있으면 안됨(이러면 대체 가능성이 없어짐)
=>역할과 구현을 철저하게 분리하도록 시스템을 설계해야함: 시스템을 언제든지 갈아끼울 수 있게 설계해야함: 역할에 의존해야지 구현에 의존하면 안됨
p.58
앞 예시(p.53)에서는 memberservice가 memberrepository 필드(인터페이스)를 가지고 있지만 오른쪽에서 memorymemberrepository() 할당(클라이언트가 구현 클래스 직접 선택함)
: 그러면 memberservice는 memorymemberrepository()에도 의존하고 있는 것(의존한다 == 내가 저 코드를 안다는 뜻)
=>memorymemberrepository를 다른걸로 바꾸려 할때 코드를 변경해야 함
:여기서는 추상화에도 의존을 하고 구체화에도 의존

1-5. 객체 지향 설계와 스프링
P.61
DI 컨테이너: 자바의 객체들을 어떤 컨테이너 안에 넣어놓고 이 안에서 의존관계를 서로 연결해주고 주입해주는 기능들 제공 => 클라이언트 코드의 변경 없이 기능 확장할 수 있도록
p.64
추상화 비용: 성능에 대한 비용이 아닌 개발자 코드를 한번 더 열어봐야 함(ex: memoryrepository 쓸지 jdbc...쓸지 runtime에 선택됨
: 코드만 열면 바로 인터페이스만 보이고 구현 클래스가 보이지 않음
: 한번 더 들여봐야 함
