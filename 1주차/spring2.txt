java version 설정 관련 참고(환경변수):
https://zetawiki.com/wiki/%EC%9C%88%EB%8F%84%EC%9A%B0_JAVA_HOME_%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98_%EC%84%A4%EC%A0%95#cite_note-2
**spring boot 페이지
artifact: project 빌드명

2-5. 회원 도메인 실행과 테스트
실제 runtime에 동작을 하면 클라이언트는 MemberServiceImpl 사용, 얘는 MemoryMemberRepository 사용
회원 클래스 다이억램: 정적
회원 객체 다이어그램: 동적: 실제 들아가야 알 수 있으므로

**나중에 빌드하면 main에 있는 code만 나가고 test에 있는 코드는 배포가 안됨(빌드될 때 빠짐)
**회원 도메인 설계의 문제점
MemberServiceImpl: MemberRepository는 interface를 의존하는데 실제 할당하는 오른쪽 부분이 구현체를 의존함: 추상화/구체화에 모두 의존함
=>변경할 때 문제가 됨: DIP 위반
OCP 원칙은 잘 준수하는가?

2-6. 주문과 할인 도메인 설계
p.11
클라이언트: 주문 생성을 할 수 있음=>주문 서비스: 주문 생성의 역할
클라이언트: main 또는 spring mvc controller 등
***예제 간단하기 위해서 data를 넘기고 상품에 관련된 걸(객체를) 안만듦
회원 조회: findbyId로 찾아옴
주문 데이터: 단순히 주문 겨로가 객체를 만들어서 클라이언트에게 보내는 것만 하고 db에 저장하는 과정 생략(단순화하기 위해서)
p.12
앞 그림에서는 역할만 그렸지만 이 그림에서는 실제 역할과 구현을 모두 그림 : 역할을 먼저 만들고 구현을 그 다음에 만듦: 역할과 구현을 분리했기 때문에 자유롭게 구현 객체를 조립할 수 있게 설계가 됨=>회원 저장소, 할인 정책 유연하게 변경 가능
p.13, 14
실제 객체 level로 구혀한 것(class diagram으로 내린 것)
객체 다이어그램: class diagram과 다르게 실제 생성해서 application을 띄워서 동적으로 객체들의 연관관계가 맺어지는 그림
회원 저장소와 할인 정책이 바뀌어도 주문 서비스 구현체는 그대로 사용할 수 있음: 즉 협력 관계를 그대로 재사용 할 수 있음(유지할 수 있음)


2-8. 주문과 할인 도메인 개발
hello.core에서 한번에 test 돌려보면 다른 건 금방 되는데(자바 띄우는 시간 제외하면 얼마 안됨) CoreApplicationTests는 spring을 띄우는 등 해야 하므로 오래 걸리는 것을 알 수 있음
다른 건 단위 test 수천개가 있어도 몇초만에 끝남: 단위 test를 잘 만드는 것이 중요함: 단위 test란 spring이나 컨테이너의 도움 없이 순수하게 자바 코드로 test 하는 것